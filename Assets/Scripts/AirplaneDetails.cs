// Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AirplaneDetails
    {
        [JsonProperty("Callsign")]
        public string Callsign { get; set; }

        [JsonProperty("IATA")]
        public string Iata { get; set; }

        [JsonProperty("ICAO")]
        public string Icao { get; set; }

        [JsonProperty("Plane Ident")]
        public string PlaneIdent { get; set; }

        [JsonProperty("Arrival/Departure (A/D)")]
        public string ArrivalDepartureAD { get; set; }

        [JsonProperty("A/D IATA")]
        public string ADIata { get; set; }

        [JsonProperty("Plane Type")]
        public PlaneType PlaneType { get; set; }

        [JsonProperty("Priority/Emergency")]
        public PriorityEmergency PriorityEmergency { get; set; }

        [JsonProperty("Fuel (%)")]
        public long Fuel { get; set; }

        [JsonProperty("Time till Ontime Arrive/Depart (s)")]
        public long TimeTillOntimeArriveDepartS { get; set; }

        [JsonProperty("Plane Asset")]
        public PlaneAsset PlaneAsset { get; set; }

        [JsonProperty("Max Passengers")]
        public long MaxPassengers { get; set; }

        [JsonProperty("Plane Size")]
        public PlaneSize PlaneSize { get; set; }

        [JsonProperty("Min Fuel %")]
        public long MinFuel { get; set; }

        [JsonProperty("timeToTerminal")]
        public long TimeToTerminal { get; set; }

        [JsonProperty("timeToRunway")]
        public long TimeToRunway { get; set; }

        [JsonProperty("timeToLand")]
        public long TimeToLand { get; set; }

        [JsonProperty("timeToAir")]
        public long TimeToAir { get; set; }
    }

    public enum PlaneAsset { Frachtmaschine757_Static, FrachtmaschineAntonovStatic, Passagiermaschine747_Static, PassagiermaschineA320Static, Privatjet1Static, Privatjet2Static, SportflugzeugBeechStatic, SportflugzeugCessnaStatic };

    public enum PlaneSize { A, B, C, E, F };

    public enum PlaneType { AirbusA320, BeechcraftBonanza, Boeing747, Boeing757, Cessna172, FairchildFh227, HondaHa420, LockheedC130 };

    public enum PriorityEmergency { Emergency, Empty, Priority };

    public partial class AirplaneDetails
    {
        public static AirplaneDetails[] FromJson(string json) => JsonConvert.DeserializeObject<AirplaneDetails[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AirplaneDetails[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                PlaneAssetConverter.Singleton,
                PlaneSizeConverter.Singleton,
                PlaneTypeConverter.Singleton,
                PriorityEmergencyConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PlaneAssetConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PlaneAsset) || t == typeof(PlaneAsset?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "frachtmaschine_757_static":
                    return PlaneAsset.Frachtmaschine757_Static;
                case "frachtmaschine_antonov_static":
                    return PlaneAsset.FrachtmaschineAntonovStatic;
                case "passagiermaschine_747_static":
                    return PlaneAsset.Passagiermaschine747_Static;
                case "passagiermaschine_a320_static":
                    return PlaneAsset.PassagiermaschineA320Static;
                case "privatjet1_static":
                    return PlaneAsset.Privatjet1Static;
                case "privatjet2_static":
                    return PlaneAsset.Privatjet2Static;
                case "sportflugzeug_beech_static":
                    return PlaneAsset.SportflugzeugBeechStatic;
                case "sportflugzeug_cessna_static":
                    return PlaneAsset.SportflugzeugCessnaStatic;
            }
            throw new Exception("Cannot unmarshal type PlaneAsset");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PlaneAsset)untypedValue;
            switch (value)
            {
                case PlaneAsset.Frachtmaschine757_Static:
                    serializer.Serialize(writer, "frachtmaschine_757_static");
                    return;
                case PlaneAsset.FrachtmaschineAntonovStatic:
                    serializer.Serialize(writer, "frachtmaschine_antonov_static");
                    return;
                case PlaneAsset.Passagiermaschine747_Static:
                    serializer.Serialize(writer, "passagiermaschine_747_static");
                    return;
                case PlaneAsset.PassagiermaschineA320Static:
                    serializer.Serialize(writer, "passagiermaschine_a320_static");
                    return;
                case PlaneAsset.Privatjet1Static:
                    serializer.Serialize(writer, "privatjet1_static");
                    return;
                case PlaneAsset.Privatjet2Static:
                    serializer.Serialize(writer, "privatjet2_static");
                    return;
                case PlaneAsset.SportflugzeugBeechStatic:
                    serializer.Serialize(writer, "sportflugzeug_beech_static");
                    return;
                case PlaneAsset.SportflugzeugCessnaStatic:
                    serializer.Serialize(writer, "sportflugzeug_cessna_static");
                    return;
            }
            throw new Exception("Cannot marshal type PlaneAsset");
        }

        public static readonly PlaneAssetConverter Singleton = new PlaneAssetConverter();
    }

    internal class PlaneSizeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PlaneSize) || t == typeof(PlaneSize?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "A":
                    return PlaneSize.A;
                case "B":
                    return PlaneSize.B;
                case "C":
                    return PlaneSize.C;
                case "E":
                    return PlaneSize.E;
                case "F":
                    return PlaneSize.F;
            }
            throw new Exception("Cannot unmarshal type PlaneSize");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PlaneSize)untypedValue;
            switch (value)
            {
                case PlaneSize.A:
                    serializer.Serialize(writer, "A");
                    return;
                case PlaneSize.B:
                    serializer.Serialize(writer, "B");
                    return;
                case PlaneSize.C:
                    serializer.Serialize(writer, "C");
                    return;
                case PlaneSize.E:
                    serializer.Serialize(writer, "E");
                    return;
                case PlaneSize.F:
                    serializer.Serialize(writer, "F");
                    return;
            }
            throw new Exception("Cannot marshal type PlaneSize");
        }

        public static readonly PlaneSizeConverter Singleton = new PlaneSizeConverter();
    }

    internal class PlaneTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PlaneType) || t == typeof(PlaneType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Airbus A320":
                    return PlaneType.AirbusA320;
                case "Beechcraft Bonanza":
                    return PlaneType.BeechcraftBonanza;
                case "Boeing 747":
                    return PlaneType.Boeing747;
                case "Boeing 757":
                    return PlaneType.Boeing757;
                case "Cessna 172":
                    return PlaneType.Cessna172;
                case "Fairchild FH-227":
                    return PlaneType.FairchildFh227;
                case "Honda HA-420":
                    return PlaneType.HondaHa420;
                case "Lockheed C-130":
                    return PlaneType.LockheedC130;
            }
            throw new Exception("Cannot unmarshal type PlaneType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PlaneType)untypedValue;
            switch (value)
            {
                case PlaneType.AirbusA320:
                    serializer.Serialize(writer, "Airbus A320");
                    return;
                case PlaneType.BeechcraftBonanza:
                    serializer.Serialize(writer, "Beechcraft Bonanza");
                    return;
                case PlaneType.Boeing747:
                    serializer.Serialize(writer, "Boeing 747");
                    return;
                case PlaneType.Boeing757:
                    serializer.Serialize(writer, "Boeing 757");
                    return;
                case PlaneType.Cessna172:
                    serializer.Serialize(writer, "Cessna 172");
                    return;
                case PlaneType.FairchildFh227:
                    serializer.Serialize(writer, "Fairchild FH-227");
                    return;
                case PlaneType.HondaHa420:
                    serializer.Serialize(writer, "Honda HA-420");
                    return;
                case PlaneType.LockheedC130:
                    serializer.Serialize(writer, "Lockheed C-130");
                    return;
            }
            throw new Exception("Cannot marshal type PlaneType");
        }

        public static readonly PlaneTypeConverter Singleton = new PlaneTypeConverter();
    }

    internal class PriorityEmergencyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PriorityEmergency) || t == typeof(PriorityEmergency?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return PriorityEmergency.Empty;
                case "Emergency":
                    return PriorityEmergency.Emergency;
                case "Priority":
                    return PriorityEmergency.Priority;
            }
            throw new Exception("Cannot unmarshal type PriorityEmergency");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PriorityEmergency)untypedValue;
            switch (value)
            {
                case PriorityEmergency.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case PriorityEmergency.Emergency:
                    serializer.Serialize(writer, "Emergency");
                    return;
                case PriorityEmergency.Priority:
                    serializer.Serialize(writer, "Priority");
                    return;
            }
            throw new Exception("Cannot marshal type PriorityEmergency");
        }

        public static readonly PriorityEmergencyConverter Singleton = new PriorityEmergencyConverter();
    }
}
